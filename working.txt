🔥 FIREBASE INTEGRATION IN SPLITUP PROJECT 🔥
=================================================

This document explains how Firebase is working in our SplitUp project in simple terms.

📁 PROJECT STRUCTURE
====================
SplitUp/
├── src/services/firebase.js     ← Main Firebase setup file
├── firebase/firebase.json       ← Firebase deployment config
├── src/App.jsx                  ← Uses Firebase auth state
├── src/pages/auth/LoginPage.jsx ← Handles login/signup
├── src/pages/Plans.jsx          ← Saves payment data
├── src/pages/Orders.jsx         ← Reads user orders
├── src/pages/AdminPortal.jsx    ← Manages all orders
└── src/components/Navbar.jsx    ← Handles logout

🔧 1. FIREBASE SETUP (firebase.js)
===================================

WHAT IT DOES:
- Connects our app to Firebase project "split-up-auth"
- Sets up authentication (login/logout)
- Sets up Firestore database (storing data)
- Creates wrapper functions for easy use

KEY PARTS:
┌─────────────────────────────────────────────────────────┐
│ Firebase Config (lines 59-80)                          │
│ ├── API Key: Identifies our app                        │
│ ├── Auth Domain: Where users login                     │
│ ├── Project ID: "split-up-auth"                        │
│ └── Other settings for storage, messaging              │
└─────────────────────────────────────────────────────────┘

┌─────────────────────────────────────────────────────────┐
│ Firebase Services Initialized (lines 86-106)           │
│ ├── app = Firebase app instance                        │
│ ├── auth = Authentication service                      │
│ ├── db = Firestore database                           │
│ └── googleProvider = Google sign-in                    │
└─────────────────────────────────────────────────────────┘

🔐 2. AUTHENTICATION SYSTEM
============================

TWO TYPES OF USERS:
1. Regular Users (Google + Email/Password)
2. Admin Users (Hardcoded: admin@gmail.com / admin) # no firebase used here only hardcoded..

GOOGLE AUTHENTICATION:
┌─────────────────────────────────────────────────────────┐
│ File: LoginPage.jsx (lines 45-78)                      │
│                                                         │
│ User clicks "Sign in with Google" button               │
│         ↓                                               │
│ handleGoogleSignIn() function runs                     │
│         ↓                                               │
│ signInWithPopup(auth, googleProvider)                  │
│         ↓                                               │
│ Creates user profile in Firestore database             │
│         ↓                                               │
│ User is logged in and redirected                       │
└─────────────────────────────────────────────────────────┘

EMAIL/PASSWORD AUTHENTICATION:
┌─────────────────────────────────────────────────────────┐
│ File: LoginPage.jsx (lines 85-132)                     │
│                                                         │
│ User enters email/password and clicks login/signup     │
│         ↓                                               │
│ handleEmailAuth() function runs                        │
│         ↓                                               │
│ For Signup: createUserWithEmailAndPassword()           │
│ For Login: signInWithEmailAndPassword()                │
│         ↓                                               │
│ Creates/updates user profile in database               │
│         ↓                                               │
│ User is logged in and redirected                       │
└─────────────────────────────────────────────────────────┘

ADMIN AUTHENTICATION:
┌─────────────────────────────────────────────────────────┐
│ File: LoginPage.jsx (lines 90-99)                      │
│                                                         │
│ Admin switches to "Admin" mode on login page           │
│         ↓                                               │
│ Enters admin@gmail.com / admin                         │
│         ↓                                               │
│ Special check: isAdminEmail() and password check       │
│         ↓                                               │
│ Creates admin user object with isAdmin: true           │
│         ↓                                               │
│ Stores in localStorage for state persistence                  │
│         ↓                                               │
│ Redirects to /admin portal                             │
└─────────────────────────────────────────────────────────┘

📊 3. DATA STORAGE SYSTEM
==========================

FIRESTORE DATABASE STRUCTURE:
```
split-up-auth (Firebase Project)
├── users/           ← User profiles
│   ├── {userId1}    ← Document with user info
│   ├── {userId2}    
│   └── ...
└── payments/        ← Payment/order data
    ├── {orderId1}   ← Document with order details
    ├── {orderId2}   
    └── ...
```

USER DATA STORAGE:
┌─────────────────────────────────────────────────────────┐
│ File: firebase.js (lines 251-287)                      │
│ Function: createOrUpdateUser()                          │
│                                                         │
│ When user logs in (Google or email):                   │
│ ├── Creates document in 'users' collection             │
│ ├── Uses user's UID as document ID                     │
│ ├── Stores: uid, email, displayName, photoURL          │
│ ├── Adds: createdAt, lastLoginAt timestamps            │
│ └── Updates lastLoginAt on each login                  │
└─────────────────────────────────────────────────────────┘

PAYMENT DATA STORAGE:
┌─────────────────────────────────────────────────────────┐
│ File: Plans.jsx (lines 315-329)                        │
│                                                         │
│ When user makes a payment:                             │
│ ├── addDoc(collection(db, 'payments'), {...})          │
│ ├── Stores: name, email, phone, subscriptionType       │
│ ├── Stores: planType, bookingAmount, totalAmount       │
│ ├── Stores: paymentMethod, status, createdAt           │
│ └── Auto-generates unique document ID                  │
└─────────────────────────────────────────────────────────┘

🔄 4. HOW FIREBASE FUNCTIONS ARE USED
=====================================

APP.JSX - Authentication State Management:
┌─────────────────────────────────────────────────────────┐
│ File: App.jsx (lines 65-79)                            │
│                                                         │
│ useEffect(() => {                                       │
│   // Check for admin session first                     │
│   const adminSession = localStorage.getItem('...')     │
│   if (adminSession) {                                   │
│     setUser(JSON.parse(adminSession))                  │
│     return                                              │
│   }                                                     │
│   // Otherwise use Firebase auth                       │
│   const unsubscribe = auth.onAuthStateChanged(u => {   │
│     setUser(u)                                          │
│   })                                                    │
│   return unsubscribe                                    │
│ })                                                      │
└─────────────────────────────────────────────────────────┘

LOGINPAGE.JSX - User Authentication:
┌─────────────────────────────────────────────────────────┐
│ Imports from firebase.js:                              │
│ ├── auth, db, googleProvider                           │
│ ├── signInWithPopup                                    │
│ ├── signInWithEmailAndPassword                         │
│ ├── createUserWithEmailAndPassword                     │
│ ├── doc, setDoc, getDoc, serverTimestamp               │
│                                                        │
│ Uses these to:                                         │
│ ├── Handle Google sign-in                              │
│ ├── Handle email/password login                        │
│ ├── Handle user registration                           │
│ └── Save user profiles to database                     │
└─────────────────────────────────────────────────────────┘

PLANS.JSX - Save Payment Data (DETAILED FLOW):
┌─────────────────────────────────────────────────────────┐
│ Imports from firebase.js:                              │
│ ├── db, collection, addDoc, serverTimestamp            │
│                                                         │
│ PAYMENT FLOW (handleCompletePayment function):         │
│ Step 1: User selects payment method (UPI/Card/Net)     │
│ Step 2: Validation - check if payment method selected  │
│ Step 3: Set loading state to show spinner              │
│ Step 4: Call Firebase addDoc() with payment data:      │
│   ├── name: userDetails?.name                          │
│   ├── email: userDetails?.email                        │
│   ├── phone: userDetails?.phone                        │
│   ├── subscriptionType: plan.name (Netflix/Spotify)    │
│   ├── planType: plan.planType (Premium/Family)         │
│   ├── numberOfPeople: extracted from plan details      │
│   ├── amountPaid: bookingAmount (10% of total)         │
│   ├── amountRemaining: plan.price - bookingAmount      │
│   ├── totalAmount: plan.price (full subscription cost) │
│   ├── paymentMethod: selected method                   │
│   ├── createdAt: serverTimestamp() (server time)       │
│   ├── updatedAt: serverTimestamp() (server time)       │
│   └── status: 'pending' (default status)               │
│ Step 5: Show success message "Payment Successful!"     │
│ Step 6: Close payment modal and reset form             │
└─────────────────────────────────────────────────────────┘

FIREBASE PAYMENT DOCUMENT STRUCTURE:
┌─────────────────────────────────────────────────────────┐
│ Collection: 'payments'                                  │
│ Document ID: Auto-generated by Firebase                │
│ Document Data Example:                                  │
│ {                                                       │
│   name: "John Doe",                                     │
│   email: "john@gmail.com",                             │
│   phone: "9876543210",                                 │
│   subscriptionType: "Netflix",                         │
│   planType: "Premium 4K + HDR",                        │
│   numberOfPeople: "5 people",                          │
│   amountPaid: 139,                                     │
│   amountRemaining: 510,                                │
│   totalAmount: 649,                                    │
│   paymentMethod: "UPI",                                │
│   createdAt: Timestamp(2024-01-15 10:30:00),          │
│   updatedAt: Timestamp(2024-01-15 10:30:00),          │
│   status: "pending"                                     │
│ }                                                       │
└─────────────────────────────────────────────────────────┘

ORDERS.JSX - Read User Orders:
┌─────────────────────────────────────────────────────────┐
│ Imports from firebase.js:                              │
│ ├── db, collection, query, where, getDocs              │
│                                                         │
│ To show user's orders:                                  │
│ ├── Creates query: where('email', '==', user.email)    │
│ ├── Searches 'payments' collection                     │
│ ├── Gets all orders for current user                   │
│ └── Displays them grouped by status                    │
└─────────────────────────────────────────────────────────┘

ADMINPORTAL.JSX - Manage All Orders:
┌─────────────────────────────────────────────────────────┐
│ Imports from firebase.js:                              │
│ ├── db, collection, getDocs, updateDoc, doc            │
│                                                         │
│ Admin functions:                                        │
│ ├── getDocs(collection(db, 'payments')) - Get all      │
│ ├── updateDoc(doc(db, 'payments', id), {...}) - Update │
│ ├── Shows all user orders in admin dashboard           │
│ └── Can change order status (pending/active/completed) │
└─────────────────────────────────────────────────────────┘

NAVBAR.JSX - User Logout:
┌─────────────────────────────────────────────────────────┐
│ Imports from firebase.js:                              │
│ ├── auth                                                │
│                                                         │
│ When user clicks logout:                               │
│ ├── Calls auth.signOut()                              │
│ ├── Clears user state: setUser(null)                  │
│ ├── Redirects to home page                             │
│ └── Clears admin session from localStorage             │
└─────────────────────────────────────────────────────────┘

🚀 5. FIREBASE DEPLOYMENT CONFIG
================================

FILE: firebase/firebase.json
┌─────────────────────────────────────────────────────────┐
│ Tells Firebase how to deploy our app:                  │
│                                                         │
│ "firestore": {                                          │
│   "rules": "firestore.rules"     ← Security rules      │
│   "indexes": "firestore.indexes.json" ← DB indexes     │
│ }                                                       │
│                                                         │
│ "hosting": {                                            │
│   "public": "dist"               ← Built app folder    │
│   "rewrites": [...]              ← Route all to React  │
│ }                                                       │
└─────────────────────────────────────────────────────────┘

📈 6. DATA FLOW VISUALIZATION
=============================

USER REGISTRATION FLOW:
User → LoginPage → Firebase Auth → Create Account → Save to Firestore → Login Success

USER LOGIN FLOW:
User → LoginPage → Firebase Auth → Verify Credentials → Set User State → Redirect

DETAILED PAYMENT FLOW:
User → Plans Page → Select Plan → Fill User Details → Choose Payment Method → handleCompletePayment() → addDoc(collection(db, 'payments'), {...}) → Firebase Firestore → Success Message → Modal Close

STEP-BY-STEP PAYMENT PROCESS:
1. User clicks "Book Now" on subscription plan
2. Plan modal opens with pricing details
3. User fills UserDetailsForm (name, email, phone)
4. Payment modal opens with method selection
5. User selects payment method (UPI/Card/Netbanking)
6. User clicks "Complete Payment"
7. handleCompletePayment() function executes:
   - Validates payment method selection
   - Sets loading state (shows spinner)
   - Calls addDoc() to save payment data to Firebase
   - Payment document created in 'payments' collection
   - Document includes: user info, plan details, amounts, timestamps
   - Status set to 'pending' for admin approval
8. Success message displayed
9. Payment modal closes
10. User can view order in Orders page

VIEW ORDERS FLOW:
User → Orders Page → Query Firestore → Filter by Email → Display Orders

ADMIN FLOW:
Admin → LoginPage → Admin Mode → Hardcoded Check → Admin Portal → Manage All Orders

🔒 7. SECURITY FEATURES
=======================

1. **Environment Variables**: API keys stored in .env file
2. **Admin Protection**: Hardcoded admin credentials (simple for MVP)
3. **Route Protection**: AdminRoute component protects admin pages
4. **User Isolation**: Users only see their own orders
5. **Firebase Rules**: Database rules control access (in firestore.rules)

💡 8. KEY TAKEAWAYS
===================

✅ **Firebase Auth**: Handles Google + email/password login
✅ **Firestore Database**: Stores user profiles and payment data
✅ **Real-time Updates**: Auth state changes trigger UI updates
✅ **Admin System**: Special handling for admin users
✅ **Data Security**: Users only access their own data
✅ **Easy Deployment**: Firebase hosting for production

🔧 **Files to Remember**:
- `firebase.js` = Main Firebase setup and functions
- `LoginPage.jsx` = All authentication logic
- `Plans.jsx` = Saves payment data
- `Orders.jsx` = Reads user orders
- `AdminPortal.jsx` = Manages all orders
- `firebase.json` = Deployment configuration

This is how Firebase powers the entire SplitUp application! 🚀
